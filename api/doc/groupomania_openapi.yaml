openapi: 3.1.0

info:
    title: Groupomania
    description: |-
        This social network enables the user to share messages and pictures, and to react to other's posts.
        Mediation is handled by administrator users.
    version: 1.0.0
    contact:
        name: Emeric Francisod
        email: emeric.francisod@gmail.com
    summary: MVP for the Groupomania's social network's API.
    license:
        name: MIT
        url: 'https://github.com/emeric-francisod/P7_Creez_un_reseau_social_d_entreprise_Francisod_Emeric/blob/development/LICENSE'

servers:
    - url: 'http://{domain}:{port}/api/v1'
      description: Development server
      variables:
          domain:
              default: localhost
          port:
              default: '3000'
tags:
    - name: user
      description: Users operations
    - name: auth
      description: Authentication operations
    - name: post
      description: Posts operations
    - name: role
      description: Roles operations
components:
    securitySchemes:
        AccessToken:
            type: http
            description: Authentication using an access token.
            scheme: bearer
        RefreshToken:
            type: http
            scheme: bearer
            description: Exceptionnal authentication using a refresh token. Used for a few selected endpoints.
    schemas:
        Error:
            title: Error

            type: object
            properties:
                type:
                    type: string
                    description: Type of the error
                title:
                    type: string
                    description: Title of the error. It should describe brievly the error and should be the same for all the errors of the same type.
                message:
                    type: string
                    description: The message will give more informations about this specific error
                details:
                    type: array
                    description: |-
                        The details contain additional information regarding the error, which would be unclear if depicted in the message string.

                        It can contains data about invalid fields, parameters, ...
                    items:
                        type: object
                statusCode:
                    type: string
                    description: "Status code of the error. It may be redundant with the status code of the response, but unlike the response's data, it remains unchanged after using a proxy."
                timestamp:
                    type: string
                    format: date-time
                    description: Date and time of the error
                path:
                    type: string
                    description: URI used in the request
                method:
                    type: string
                    description: Method used in the request
            required:
                - type
                - title
                - statusCode
                - timestamp
                - path
                - method
            examples:
                - type: ValidationError
                  title: There is some invalid data in the request
                  message: The paramters you sent are invalid
                  details:
                      - name: limit
                        location: query
                        message: The limit must be an integer greater than 0
                  statusCode: '400'
                  timestamp: '2019-08-24T14:15:22Z'
                  path: '/api/v1/posts?limit:-3'
                  method: GET
            description: Generic error format.
        User:
            title: PublicUserInfos

            type: object
            description: User informations.
            properties:
                id:
                    type: integer
                    description: The user's id
                email:
                    type: string
                    format: email
                    description: User's email
                role:
                    type: object
                    required:
                        - name
                        - id
                    properties:
                        name:
                            type: string
                            description: The user's role
                        id:
                            type: integer
                            description: the id of the user's role

            required:
                - id
                - email
                - role
            examples:
                - id: 1
                  email: john.doe@example.com
                  role:
                      name: admin
                      id: 1
        Post:
            title: Post

            type: object
            description: Post data.
            examples:
                - id: 3
                  title: The most exalting post
                  message: "This is the story of a litle man, so litle that evan I can't see him. The end."
                  imageUrl: 'http://groupomania.com/images/small_man31022002.png'
                  writer:
                      id: 3
                      email: john.doe@groupomania.com
                  likes: 2
                  usersLiked: [3, 5]
                  creationDate: '2019-08-24T14:15:22Z'
                  lastUpdateDate: null
            properties:
                id:
                    type: integer
                    description: Post's id
                title:
                    type: string
                    description: Post's title
                message:
                    type: string
                    description: Post's message
                imageUrl:
                    type:
                        - string
                        - 'null'
                    description: "Post's image's URL. Since the image is optionnal, it's value may be null."
                    format: uri
                writer:
                    type: object
                    description: The writer's informations
                    required:
                        - id
                        - email
                    properties:
                        email:
                            type: string
                            description: The writer's email
                            format: email
                        id:
                            type: integer
                            description: The writer's id
                likes:
                    type: integer
                    description: Number of likes
                usersLiked:
                    type: array
                    items:
                        type: integer
                    description: Users who liked the post
                creationDate:
                    type: string
                    format: date-time
                    description: Date of creation
                lastUpdateDate:
                    type:
                        - string
                        - 'null'
                    format: date-time
                    description: 'Date of the most recent update. When the post is created, this value will be null.'
            required:
                - id
                - title
                - message
                - imageUrl
                - writer
                - creationDate
                - lastUpdateDate
                - likes
                - usersLiked
        Role:
            title: Role

            type: object
            description: Available user roles.
            properties:
                id:
                    type: integer
                    description: Role's id
                name:
                    type: string
                    description: Role's name
            required:
                - id
                - name
            examples:
                - id: 1
                  name: admin
    requestBodies: {}
    examples: {}
    parameters:
        RoleFilter:
            name: role
            in: query
            required: false
            schema:
                type: string
            description: Filter the results by user role.
        UserFilter:
            name: userId
            in: query
            required: false
            schema:
                type: integer
            description: "Filter the ressources by user, given the user's id."
        LimitFilter:
            name: limit
            in: query
            required: false
            schema:
                type: integer
                minimum: 1
            description: Limit the number of results returned.
        OffsetFilter:
            name: offset
            in: query
            required: false
            schema:
                type: integer
            description: Allows to offset the start of the result. The value of the parameter will give the number of results not to include at the start.
        UserId:
            name: userId
            in: path
            required: true
            schema:
                type: integer
            description: User's id.
        PostId:
            name: postId
            in: path
            required: true
            schema:
                type: integer
            description: Post's id.
    responses:
        UnauthorizedRefreshTokenResponse:
            description: The refresh token is invalid or absent.
            headers:
                WWW-Authenticate:
                    schema:
                        type: string
                    description: Describes the authentication method to use
        UnauthorizedAccessTokenResponse:
            description: The access token is invalid or absent.
            headers:
                WWW-Authenticate:
                    schema:
                        type: string
                    description: Describes the authentication method to use
        BadRequestBodyResponse:
            description: 'The body is invalid (invalid JSON, validation error, ...).'
        BadRequestQueryResponse:
            description: The request's parameters are invalid (query parameters or path parameters).
        BadRequestBodyQueryResponse:
            description: 'The body is invalid (invalid JSON, validation error, ...), or the parameters are invalid.'
        ForbiddenResponse:
            description: The user doesn't have the permission to execute this action.
        LockedAccountResponse:
            description: The user's account is locked for a limited period, due to authentication failure.
        UserNotFoundResponse:
            description: The requested user can't be found.
        PostNotFoundResponse:
            description: The requested post can't be found.
security:
    - AccessToken: []
paths:
    /auth/login:
        post:
            summary: Login
            operationId: Login
            responses:
                '200':
                    description: Returns both the access token and the refresh token.
                    content:
                        application/json:
                            schema:
                                title: AuthenticationInformations
                                type: object
                                properties:
                                    accessToken:
                                        type: string
                                        description: |-
                                            Token used to authenticate the user in most of the requests.

                                            This token is short-lived and needs to be safely stored.
                                    refreshToken:
                                        type: string
                                        description: |-
                                            Token used to get a new access token once the previous one expires. It's also used to log the user out.

                                            This token has a longer life span than the access token. It should be safely stored and can be used only once.
                                    userId:
                                        type: integer
                                        description: User's unique identifier.
                                required:
                                    - accessToken
                                    - refreshToken
                                    - userId
                            examples:
                                Authentication informations:
                                    value:
                                        accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwidXNlcklkIjozMiwicm9sZUlkIjozLCJpYXQiOjE1MTYyMzkwMjJ9.fN0yO6oUJT4exdM8aGdzFQGEa98_Qzk3192YrxiVgQc
                                        refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwidXNlcklkIjozMSwicm9sZSI6MiwiaWF0IjoxNTE2MjM5MDIyfQ.7aHJpRLIfGiovWnTM9MbeS-Dnn7nQBIGokCr7GGs7A4
                                        userId: 0
                '400':
                    $ref: '#/components/responses/BadRequestBodyResponse'
                '403':
                    $ref: '#/components/responses/LockedAccountResponse'
            tags:
                - auth
            description: |-
                Creates new authentication tokens using the user's credentials.

                The API is using two types of token for authentication:
                - The **access token** is used to authenticate the user in most requests. It is short-lived and should be stored in an ephemeral and secure location, like a closure. No informations about this token is kept on the API, so it can't be revoked. To revoke this token, simply delete it.
                - The **refresh token** is used to get a new access token when it expires, without having to send the user's credentials again. It is longer lived and can be stored in a permanent but secure location. We recommand storing it on a server to avoid Cross Site Scripting attacks (chekout the Backend For Frontend pattern). This token can only be used once. Using it multiple times will result in all the user's refresh tokens being revoked.

                This request will generate a new access token for the user authentication, and a new refresh token that may be used to get a new access token with the `POST /auth/accessToken` endpoint.

                **Warning**: To prevent brute forcing accounts, after 5 failed attempts, a delay will be added before the next attempt. This delay will increase with each unsuccessful login, until the user finally logs in with success.
            requestBody:
                content:
                    application/json:
                        schema:
                            title: UserCredentials

                            type: object
                            properties:
                                email:
                                    type: string
                                    format: email
                                    description: User's email
                                password:
                                    type: string
                                    description: User's password
                            required:
                                - email
                                - password
                        examples:
                            Credentials:
                                value:
                                    email: john.doe@example.com
                                    password: P@55word
                description: "The body contains the users credentials, to prove the user's identity."
            security: []
    /auth/accessToken:
        post:
            summary: Get a new access token
            operationId: GetAccessToken
            responses:
                '200':
                    description: Returns both the access token and the refresh token.
                    content:
                        application/json:
                            schema:
                                title: AuthenticationInformations

                                type: object
                                description: Contains all the informations to authenticate the user.
                                properties:
                                    accessToken:
                                        type: string
                                        description: |-
                                            Token used to authenticate the user in most of the requests.

                                            This token is short-lived and needs to be safely stored.
                                    refreshToken:
                                        type: string
                                        description: |-
                                            Token used to get a new access token once the previous one expires. It's also used to log the user out.

                                            This token has a longer life span than the access token. It should be safely stored and can be used only once.
                                    userId:
                                        type: integer
                                        description: User's unique identifier.
                                required:
                                    - accessToken
                                    - refreshToken
                                    - userId
                            examples:
                                New tokens:
                                    value:
                                        accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwidXNlcklkIjozMiwicm9sZUlkIjozLCJpYXQiOjE1MTYyMzkwMjJ9.fN0yO6oUJT4exdM8aGdzFQGEa98_Qzk3192YrxiVgQc
                                        refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwidXNlcklkIjozMSwicm9sZSI6MiwiaWF0IjoxNTE2MjM5MDIyfQ.7aHJpRLIfGiovWnTM9MbeS-Dnn7nQBIGokCr7GGs7A4
                                        userId: 0
                '401':
                    $ref: '#/components/responses/UnauthorizedRefreshTokenResponse'
            tags:
                - auth
            description: |-
                Creates new authentication tokens using the refresh token. Use this endpoint if your access token has expired but your refresh token is still valid.

                For more informations about the different types of tokens, checkout the `POST /auth/login` endpoint's documentation.

                This request will generate a new access token for the user authentication. The refresh token will be revoked and a new one generated.

                *The authentication for this endpoint is different. You should check the details in the security section.*
            security:
                - RefreshToken: []
    /auth/logout:
        post:
            summary: Logout
            operationId: Logout
            responses:
                '204':
                    description: The refresh token sent with the request is now invalid. When the access token expires or is deleted, the user will have to user it's credentials to log back in.
                '401':
                    $ref: '#/components/responses/UnauthorizedRefreshTokenResponse'
            description: |-
                Logs the user out. Revokate the refresh token for the current user-agent.

                Since the access token has a very short life span, we made the choice to not store it in the database or the API. Thus, it can't be reboked. The client has the responsability to delete it on manual logout. The token should also be deleted when the browser window is closed, or when the user navigates to another website.

                *The authentication for this endpoint is different. You should check the details in the security section.*
            security:
                - RefreshToken: []
            tags:
                - auth
    /users:
        get:
            summary: Fetch all users
            tags:
                - user
            responses:
                '200':
                    description: Array containing all the user's data.
                    content:
                        application/json:
                            schema:
                                title: PublicUserInfosList

                                type: array
                                items:
                                    $ref: '#/components/schemas/User'
                            examples:
                                Users list:
                                    value:
                                        - id: 3
                                          email: john.doe@example.com
                                          role:
                                              name: admin
                                              id: 1
                                        - id: 4
                                          email: jean.dupont@example.com
                                          role:
                                              name: user
                                              id: 2
                '400':
                    $ref: '#/components/responses/BadRequestQueryResponse'
                '401':
                    $ref: '#/components/responses/UnauthorizedAccessTokenResponse'
            operationId: GetAllUsers
            description: |-
                Fetches the list off all users.

                The user may use parameters to filter or paginate the response.
            parameters:
                - $ref: '#/components/parameters/RoleFilter'
                - $ref: '#/components/parameters/LimitFilter'
                - $ref: '#/components/parameters/OffsetFilter'
        post:
            summary: Create a new user
            operationId: CreateUser
            responses:
                '200':
                    description: "The user is created, returns the user's data."
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                            examples:
                                New user:
                                    value:
                                        id: 1
                                        email: john.doe@example.com
                                        role:
                                            name: user
                                            id: 2
                '400':
                    $ref: '#/components/responses/BadRequestBodyResponse'
            description: |-
                Creates a new user.

                To prevent account overriding, the email the user is providing must be unique.
            security: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: User's email. This must be unique.
                                    format: email
                                password:
                                    type: string
                                    description: User's password
                            required:
                                - email
                                - password
                        examples:
                            New user:
                                value:
                                    email: john.doe@example.com
                                    password: P@55word
                description: The body contains the necessary user informations.
            tags:
                - user
    '/users/{userId}':
        parameters:
            - $ref: '#/components/parameters/UserId'
        delete:
            summary: Delete one user
            operationId: DeleteUser
            responses:
                '204':
                    description: The user is deleted.
                '400':
                    $ref: '#/components/responses/BadRequestQueryResponse'
                '401':
                    $ref: '#/components/responses/UnauthorizedAccessTokenResponse'
                '403':
                    $ref: '#/components/responses/ForbiddenResponse'
                '404':
                    $ref: '#/components/responses/UserNotFoundResponse'
            description: |-
                Deletes one user.

                To execute this action, you must:
                - Be an admin user
                OR
                - Be the user itself
            tags:
                - user
        get:
            summary: Fetch one user
            operationId: GetUser
            responses:
                '200':
                    description: Returns the selected post.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                            examples:
                                Selected user:
                                    value:
                                        id: 1
                                        email: john.doe@example.com
                                        role:
                                            name: user
                                            id: 2
                '400':
                    $ref: '#/components/responses/BadRequestQueryResponse'
                '401':
                    $ref: '#/components/responses/UnauthorizedAccessTokenResponse'
                '404':
                    $ref: '#/components/responses/UserNotFoundResponse'
            tags:
                - user
            description: Fetches specific user data depending on the id given in the path.
    '/users/{userId}/password':
        parameters:
            - $ref: '#/components/parameters/UserId'
        put:
            summary: Update one user's password
            operationId: UpdateUserPassword
            responses:
                '204':
                    description: The password is updated.
                '400':
                    $ref: '#/components/responses/BadRequestBodyQueryResponse'
                '401':
                    $ref: '#/components/responses/UnauthorizedAccessTokenResponse'
                '403':
                    $ref: '#/components/responses/ForbiddenResponse'
                '404':
                    $ref: '#/components/responses/UserNotFoundResponse'
            tags:
                - user
            description: |-
                Updates the user's password.

                To execute this action, you must:
                - Be the owner of the account

                To confirm your identity, you must include your previous password in the request's body.
            requestBody:
                content:
                    application/json:
                        schema:
                            title: NewPassword

                            type: object
                            properties:
                                oldPassword:
                                    type: string
                                    description: Previous password
                                newPassword:
                                    type: string
                                    description: New password
                            required:
                                - oldPassword
                                - newPassword
                        examples:
                            New password:
                                value:
                                    oldPassword: P@55word
                                    newPassword: N3wP@55word
                description: The body contains the new password as well as the previous password to confirm the user's identity.
    '/users/{userId}/email':
        parameters:
            - $ref: '#/components/parameters/UserId'
        put:
            summary: Update one user's email
            operationId: UpdateUserEmail
            responses:
                '204':
                    description: The email is updated.
                '400':
                    $ref: '#/components/responses/BadRequestBodyQueryResponse'
                '401':
                    $ref: '#/components/responses/UnauthorizedAccessTokenResponse'
                '403':
                    $ref: '#/components/responses/ForbiddenResponse'
                '404':
                    $ref: '#/components/responses/UserNotFoundResponse'
            tags:
                - user
            description: |-
                Updates the user's email.

                To execute this action, you must:
                - Be the owner of the account
            requestBody:
                content:
                    application/json:
                        schema:
                            title: NewEmail

                            type: object
                            properties:
                                email:
                                    type: string
                                    format: email
                                    description: New email
                            required:
                                - email
                        examples:
                            New email:
                                value:
                                    email: new.john.doe@example.com
                description: The body contains the new user's email.
    '/users/{userId}/role':
        parameters:
            - $ref: '#/components/parameters/UserId'
        put:
            summary: Update one user's role
            operationId: UpdateUserRole
            responses:
                '204':
                    description: The role is udpated.
                '400':
                    $ref: '#/components/responses/BadRequestBodyQueryResponse'
                '401':
                    $ref: '#/components/responses/UnauthorizedAccessTokenResponse'
                '403':
                    $ref: '#/components/responses/ForbiddenResponse'
                '404':
                    $ref: '#/components/responses/UserNotFoundResponse'
            tags:
                - user
            description: |-
                Updates the user's role.

                To execute this action, you must:
                - Be an admin user
            requestBody:
                content:
                    application/json:
                        schema:
                            title: NewRole

                            type: object
                            properties:
                                roleId:
                                    type: integer
                                    description: Id of the new role of the user
                            required:
                                - roleId
                        examples:
                            New role:
                                value:
                                    roleId: 1
                description: The body contain's the new user's role. The role is identified by its id.
    /posts:
        get:
            summary: Fetch all the posts
            tags:
                - post
            responses:
                '200':
                    description: Array containing all the post's data.
                    content:
                        application/json:
                            schema:
                                title: PostList

                                type: array
                                items:
                                    $ref: '#/components/schemas/Post'
                            examples:
                                Posts list:
                                    value:
                                        - id: 3
                                          title: The most exalting post
                                          message: "This is the story of a litle man, so litle that evan I can't see him. The end."
                                          imageUrl: 'http://groupomania.com/images/small_man31022002.png'
                                          likes: 3
                                          writer:
                                              id: 1
                                              email: jane.foster@groupomania.com
                                          usersLiked: [1, 2, 3]
                                          creationDate: '2019-08-24T14:15:22Z'
                                          lastUpdateDate: null
                                        - id: 3
                                          title: The most boring post
                                          message: 'This is the story of a normal child in a normal house, wearing normal clothes.'
                                          imageUrl: null
                                          writer:
                                              id: 3
                                              email: john.doe@groupomania.com
                                          likes: 0
                                          usersLiked: []
                                          creationDate: '2019-08-24T14:15:22Z'
                                          lastUpdateDate: '2020-09-18T03:12:13Z'
                '400':
                    $ref: '#/components/responses/BadRequestQueryResponse'
                '401':
                    $ref: '#/components/responses/UnauthorizedAccessTokenResponse'
            operationId: GetAllPosts
            description: |-
                Fetches the list off all posts.

                The user may use parameters to filter or paginate the response.
            parameters:
                - $ref: '#/components/parameters/UserFilter'
                - $ref: '#/components/parameters/LimitFilter'
                - $ref: '#/components/parameters/OffsetFilter'
        post:
            summary: Create a new post
            operationId: CreatePost
            responses:
                '201':
                    description: "The post is created, returns the post's data."
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Post'
                            examples:
                                New post:
                                    value:
                                        id: 3
                                        title: The most exalting post
                                        message: "This is the story of a litle man, so litle that evan I can't see him. The end."
                                        imageUrl: 'http://groupomania.com/images/small_man31022002.png'
                                        writer:
                                            id: 3
                                            email: john.doe@groupomania.com
                                        likes: 0
                                        usersLiked: []
                                        creationDate: '2019-08-24T14:15:22Z'
                                        lastUpdateDate: null
                '400':
                    $ref: '#/components/responses/BadRequestBodyQueryResponse'
                '401':
                    $ref: '#/components/responses/UnauthorizedAccessTokenResponse'
            description: Creates a new post.
            requestBody:
                content:
                    application/json:
                        schema:
                            title: NewPostInfos

                            type: object
                            properties:
                                title:
                                    type: string
                                    description: Post's title
                                message:
                                    type: string
                                    description: Post's message
                            required:
                                - title
                                - message
                        examples:
                            New Post:
                                value:
                                    title: My new fantastic post
                                    message: This message is so great you will never forget it!
                    multipart/form-data:
                        schema:
                            title: NewPostInfosWithImage

                            type: object
                            properties:
                                post:
                                    type: string
                                    description: Contains a JSON string representing the sauce data.
                                    example: '"{"title": "The post''s title", "message": "You will find something to write"}"'
                                image:
                                    type: string
                                    format: binary
                                    description: Contains the image to send.
                            required:
                                - post
                                - image
                        examples:
                            New post with image:
                                value:
                                    post: '{"title": "The title", "message": "And the message"}'
                                    image: image binary
                description: |-
                    The body contains the new post's data. Two format can be used, depending on the content:
                    - Use JSON if the post doesn't contain any image. All the post's data are within this object.
                    - Use form-data to send an image. The post data will be in the `post` property as a JSON string, and the `image` property will contain the image.
            tags:
                - post
    '/posts/{postId}':
        parameters:
            - $ref: '#/components/parameters/PostId'
        get:
            summary: Fetch a post
            tags:
                - post
            responses:
                '200':
                    description: Returns the selected post.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Post'
                            examples:
                                Post:
                                    value:
                                        id: 3
                                        title: The most exalting post
                                        message: "This is the story of a litle man, so litle that evan I can't see him. The end."
                                        imageUrl: 'http://groupomania.com/images/small_man31022002.png'
                                        writer:
                                            id: 3
                                            email: john.doe@groupomania.com
                                        likes: 3
                                        usersLiked: [1, 2, 3]
                                        creationDate: '2019-08-24T14:15:22Z'
                                        lastUpdateDate: null
                '400':
                    $ref: '#/components/responses/BadRequestQueryResponse'
                '401':
                    $ref: '#/components/responses/UnauthorizedAccessTokenResponse'
                '404':
                    $ref: '#/components/responses/PostNotFoundResponse'
            operationId: GetPost
            description: Fetches a specific post depending on the id given in the path.
        put:
            summary: Update a post
            operationId: UpdatePost
            responses:
                '200':
                    description: The post is updated. Returns the post's new data.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Post'
                            examples:
                                Updated data:
                                    value:
                                        id: 3
                                        title: The most exalting post with an update
                                        message: "This is the story of a litle man, so litle that evan I can't see him. The end."
                                        imageUrl: 'http://groupomania.com/images/new_small_man31022002.png'
                                        writer:
                                            id: 3
                                            email: john.doe@groupomania.com
                                        likes: 3
                                        usersLiked: [1, 2, 3]
                                        creationDate: '2019-08-24T14:15:22Z'
                                        lastUpdateDate: '2022-10-08T08:34:45Z'
                '400':
                    $ref: '#/components/responses/BadRequestBodyQueryResponse'
                '401':
                    $ref: '#/components/responses/UnauthorizedAccessTokenResponse'
                '403':
                    $ref: '#/components/responses/ForbiddenResponse'
                '404':
                    $ref: '#/components/responses/PostNotFoundResponse'
            description: |-
                Updates a post.

                To execute this action, you must:
                - Be the owner of the post
                OR
                - Be an admin user
            requestBody:
                content:
                    application/json:
                        schema:
                            title: PostInfosUpdate

                            type: object
                            properties:
                                title:
                                    type: string
                                    description: Post's new title
                                message:
                                    type: string
                                    description: Post's new message
                                deleteImage:
                                    type: boolean
                                    default: false
                                    description: Specifies whether to remove the image from the post
                        examples:
                            'Update post, delete the image':
                                value:
                                    title: The new title
                                    message: And a litle update for the message
                                    deleteImage: true
                            'Update post, keep the image':
                                value:
                                    title: The new title
                                    message: And a litle update for the message
                    multipart/form-data:
                        schema:
                            title: PostInfosUpdateWithImage

                            type: object
                            properties:
                                post:
                                    type: string
                                    description: Contains a JSON string representing the sauce data.
                                    example: '"{"title": "The post''s title", "message": "You will find something to write"}"'
                                image:
                                    type: string
                                    format: binary
                                    description: Contains the image to send.
                            required:
                                - post
                                - image
                        examples:
                            Post update with image:
                                value:
                                    post: '{"title": "The title", "message": "And the message"}'
                                    image: image binary
                description: |-
                    The body contains the updated post's data. Two format can be used, depending on the content:
                    - Use JSON if the image is not modified. All the post's data are within this object. If you wish to delete the image, set the `deleteImage` property to `true`.
                    - Use Form-data to update the image. The post data will be in the `post` property as a JSON string, and the `image` property will contain the image.
            tags:
                - post
        delete:
            summary: Delete a post
            operationId: DeletePost
            responses:
                '204':
                    description: The post is deleted.
                '400':
                    $ref: '#/components/responses/BadRequestQueryResponse'
                '401':
                    $ref: '#/components/responses/UnauthorizedAccessTokenResponse'
                '403':
                    $ref: '#/components/responses/ForbiddenResponse'
                '404':
                    $ref: '#/components/responses/PostNotFoundResponse'
            description: |-
                Deletes a post.

                To execute this action, you must:
                - Be the owner of the post
                OR
                - Be an admin user
            tags:
                - post
    '/posts/{postId}/like':
        parameters:
            - $ref: '#/components/parameters/PostId'
        post:
            summary: Like a post
            tags:
                - post
            responses:
                '200':
                    description: |-
                        The request is successful.

                        The request succeding doesn't mean the action succeding. The message gives the user more informations on the result of that action. It can be successful (e.g., the like is accepted, the like is removed), or fail (e.g., the user has already liked, the user has nothing to reset).
                    content:
                        application/json:
                            schema:
                                title: Message

                                type: object
                                description: Generic message.
                                properties:
                                    message:
                                        type: string
                                        description: Message to send.
                                required:
                                    - message
                            examples:
                                The post is liked:
                                    value:
                                        message: the post has been liked. Thank you.
                                The like is removed:
                                    value:
                                        message: Your like has been removed.
                                The user already liked:
                                    value:
                                        message: "Your like can't be applied, you already liked this post."
                '400':
                    $ref: '#/components/responses/BadRequestBodyQueryResponse'
                '401':
                    $ref: '#/components/responses/UnauthorizedAccessTokenResponse'
                '404':
                    $ref: '#/components/responses/PostNotFoundResponse'
            operationId: LikePost
            description: |-
                Performs some kinf of like action.

                Each user can only like a post once.

                Depending on the desired action, the like value will be different:
                - 1 will attempt to like the post
                - 0 will attempt to remove the like
            requestBody:
                content:
                    application/json:
                        schema:
                            title: Like

                            type: object
                            properties:
                                like:
                                    type: integer
                                    description: |-
                                        Integer representing the action to take:
                                        - 1 means a like
                                        - 0 means to reset the like
                                    enum:
                                        - 1
                                        - 0
                            required:
                                - like
                        examples:
                            Like:
                                value:
                                    like: 1
                            Reset like:
                                value:
                                    like: 0
                description: |-
                    The body contains the id of the action to execute:
                    - 1 to like
                    - 0 to reset the like
    /roles:
        get:
            summary: Fetch all roles
            tags:
                - role
            responses:
                '200':
                    description: Array containing all the roles.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Role'
                            examples:
                                example-1:
                                    value:
                                        - id: 1
                                          name: admin
                                        - id: 2
                                          name: user
                '401':
                    $ref: '#/components/responses/UnauthorizedAccessTokenResponse'
            operationId: GetAllRoles
            description: Fetches the list off all roles.
